ext {

    // Versions
    supportVersion = '28.0.0'
    supportAnnotationsVersion = '22.2.0'
    supportConstraintVersion = '1.1.3'
    supportTestRunnerVersion = '1.0.2'
    supportTestEspressoVersion = '3.0.2'
    architectureComponentVersion = '1.1.1'
    junitVersion = '4.12'
    baristaVersion = '1.7.0'
    rxKotlinVersion = '2.2.0'
    rxAndroidVersion = '2.0.2'
    daggerVersion = '2.14.1'
    retrofitVersion = '2.5.0'
    mockitoVersion = '2.24.0'
    okHttpVersion = '3.12.0'
    mockitoKotlinVersion = '2.1.0'

    // Packages
    supportPackage = 'com.android.support'
    architecturePackage = 'android.arch.lifecycle'
    junitPackage = 'junit'
    baristaPackage = 'com.schibsted.spain'
    architectureCorePackage = 'android.arch.core'
    kotlinPackage = 'org.jetbrains.kotlin'
    reactivexPackage = 'io.reactivex.rxjava2'
    daggerPackage = 'com.google.dagger'
    retrofitPackage = 'com.squareup.retrofit2'
    mockitoPackage = 'org.mockito'
    mockitoKotlinPackage = 'com.nhaarman.mockitokotlin2'
    okHttpMockWebserverPackage = 'com.squareup.okhttp3'

    // Dependencies
    supportDependencies = [
            appCompat  : buildDependency(supportPackage, 'appcompat-v7', supportVersion),
            design     : buildDependency(supportPackage, 'design', supportVersion),
            annotations: buildDependency(supportPackage, 'support-annotations', supportAnnotationsVersion),
            constraint : buildDependency("${supportPackage}.constraint", 'constraint-layout', supportConstraintVersion)
    ]

    reactivexDependencies = [
            rxAndroid: buildDependency(reactivexPackage, 'rxandroid', rxAndroidVersion),
            rxKotlin : buildDependency(reactivexPackage, 'rxkotlin', rxKotlinVersion)
    ]

    daggerDependencies = [
            dagger: buildDependency(daggerPackage, 'dagger', daggerVersion),
            daggerCompiler: buildDependency(daggerPackage, 'dagger-compiler', daggerVersion)
    ]

    retrofitDependencies = [
            retrofit: buildDependency(retrofitPackage, 'retrofit', retrofitVersion),
            adapterRxjava2: buildDependency(retrofitPackage, 'adapter-rxjava2', retrofitVersion),
            converterGson: buildDependency(retrofitPackage, 'converter-gson', retrofitVersion)
    ]

    architectureComponentDependencies = [
            viewModelAndLiveData: buildDependency(architecturePackage, 'extensions', architectureComponentVersion)
    ]

    testingDependencies = [
            junit             : buildDependency(junitPackage, 'junit', junitVersion),
            barista           : buildDependency(baristaPackage, 'barista', baristaVersion),
            liveDataTestHelper: buildDependency(architectureCorePackage, 'core-testing', architectureComponentVersion),
            runner            : buildDependency("${supportPackage}.test", 'runner', supportTestRunnerVersion),
            rules             : buildDependency("${supportPackage}.test", 'rules', supportTestRunnerVersion),
            espresso          : buildDependency("${supportPackage}.test.espresso", 'espresso-core', supportTestEspressoVersion),
            mockito           : buildDependency(mockitoPackage, 'mockito-core', mockitoVersion),
            mockitoKotlin     : buildDependency(mockitoKotlinPackage, 'mockito-kotlin', mockitoKotlinVersion),
            okHttpMockWebserver : buildDependency(okHttpMockWebserverPackage, 'mockwebserver', okHttpVersion)
    ]

    kotlinDependency = buildDependency(kotlinPackage, 'kotlin-stdlib-jdk7', kotlin_version)
}


static String buildDependency(String pack, String dependency, String version) {
    return "${pack}:${dependency}:${version}"
}